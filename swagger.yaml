tags:
- name: users
  description: users API
- name: login
  description: login

# 1) Define the security scheme type (HTTP bearer)
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
# 2) Apply the security globally to all operations
security:
  - bearerAuth: []         # use the same name as above


paths:
# [POST] login
  /login:
    post:
      tags:
      - login
      summary: login
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/login'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: string
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'



# [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: string
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] words
  /words:
    get:
      tags:
      - words
      summary: Get common words
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] words
    post:
      tags:
      - words
      summary: Create word
      parameters:
      - name: body
        in: body
        description: word data
        required: true
        schema:
          $ref: '#/definitions/words'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'


# [GET] words/id
  /words/{id}:
    get:
      tags:
      - words
      summary: Find word by id
      parameters:
      - name: id
        in: path
        description: Word id
        required: true
        type: string
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] words/id
    put:
      tags:
      - words
      summary: Update word by id
      parameters:
      - name: id
        in: path
        description: word id
        required: true
        type: string
      - name: body
        in: body
        description: word data
        required: true
        schema:
          $ref: '#/definitions/words'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'


# [DELETE] words/id
    delete:
      tags:
      - words
      summary: Delete word by id
      parameters:
      - name: id
        in: path
        description: word id
        required: true
        type: string
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'


# definitions
definitions:
  login:
    type: object
    required:
        - email
        - password
    properties:
      email:
        type: string
        description: User email
        example: user@user.com
      password:
        type: string
        description: User password
        example: Qwerty123@
  users:
    type: object
    required:
        - email
        - password
        - name
    properties:
      id:
        type: string
        description: user Id
      email:
        type: string
        description: user Email
      name:
        type: string
        description: user Name
      password:
        type: string
        description: user Password
  words:
    type: object
    required:
        - word
        - transcription
        - translation
        - usageExamples
    properties:
      id:
        type: string
        description: word Id
      word:
        type: string
        description: english word
      transcription:
        type: string
        description: word transcription
      translation:
        type: array
        items:
          type: string
      usageExamples:
        type: array
        items:
          type: object
          properties:
            sentence:
              type: string
            translation:
              type: string

  

schemes:
 - https
 - http
